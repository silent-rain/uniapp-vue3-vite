/* Visit https://aka.ms/tsconfig to read more about this file
 * https://blog.csdn.net/u010100877/article/details/125501185
 */
{
  "compilerOptions": {
    /*项目选项*/
    "target": "esnext", // 指定ts编译成ES的版本。
    "module": "esnext", // 指定编译后代码使用的模块化规范。
    "allowJs": true, // 允许编译器编译JS，JSX文件
    "checkJs": false, // 允许在JS文件中报错，通常与allowJS一起使用
    "jsx": "preserve", // 允许使用jsx
    "removeComments": true, //移除注解
    "sourceMap": true, // 是否生成相应的Map映射的文件，默认：false。
    "declaration": true, // 是否生成相应的 .d.ts 声明文件，默认：false。
    "outDir": "./dist", // 指定编译后文件所在目录。
    // "lib": ["esnext", "dom"], // 指定项目运行时使用的库。

    /* 严格检查选项 */
    "strict": true, // 开启所有严格的类型检查, --strict相当于启用 --noImplicitAny, --noImplicitThis, --alwaysStrict， --strictNullChecks和 --strictFunctionTypes和--strictPropertyInitialization。
    "alwaysStrict": true, // 在代码中注入'use strict'
    "noImplicitAny": true, // 不允许隐式的any类型
    "noImplicitThis": true, // 不允许this有隐式的any类型
    "strictNullChecks": true, // 不允许把null、undefined赋值给其他类型的变量
    "strictBindCallApply": true, // 严格的bind/call/apply检查
    "strictFunctionTypes": true, // 不允许函数参数双向协变
    "strictPropertyInitialization": true, // 类的实例属性必须初始化

    /* 额外检查 */
    "noUnusedLocals": false, //是否检查未使用的局部变量
    "noUnusedParameters": false, //是否检查未使用的参数
    "noImplicitReturns": true, //检查函数是否不含有隐式返回值
    "noImplicitOverride": true, //是否检查子类继承自基类时，其重载的函数命名与基类的函数不同步问题
    "noFallthroughCasesInSwitch": true, //检查switch中是否含有case没有使用break跳出
    "noUncheckedIndexedAccess": true, //是否通过索引签名来描述对象上有未知键但已知值的对象
    "noPropertyAccessFromIndexSignature": true, //是否通过" . “(obj.key) 语法访问字段和"索引”( obj[“key”])， 以及在类型中声明属性的方式之间的一致性

    /*模块解析选项*/
    "esModuleInterop": true, //允许export=导出，由import from 导入
    "moduleResolution": "node", // 模块解析策略，ts默认用node的解析策略，即相对的方式导入
    "baseUrl": ".", // 用于解析非绝对模块名的基本目录，相对模块不受影响。
    "paths": {
      "@/*": ["src/*"],
      "~/*": ["src/typings/*"]
    }, // 用于设置模块名称基于baseUrl的路径映射关系。
    "types": ["@dcloudio/types", "@types/node"], // 用来指定需要包含的模块，并将其包含在全局范围内。

    /*高级选项*/
    "preserveConstEnums": true, // 是否禁止删除枚举常量生成代码中的声明
    "resolveJsonModule": true, // 是否允许把json文件当做模块进行解析
    "skipLibCheck": true, // 是否跳过声明文件的类型检查，这可以在编译期间以牺牲类型系统准确性为代价来节省时间, 忽略所有的声明文件（ *.d.ts）的类型检查。
    "useDefineForClassFields": true // 此标志用作迁移到即将推出的类字段标准版本的一部分
  },

  /*根选项*/
  //使用小技巧：在填写路径时 ** 表示任意目录， * 表示任意文件。
  // "files": [], // 指定需要被编译的文件
  "include": ["src", "src/**/*", "src/**/*.vue", "src/typings", "auto-imports.d.ts"] // 指定被编译文件所在的目录、文件
  // "exclude": ["src/pages.json", "src/pages.ts"] // 指定不需要被编译的目录、文件，不能去除files指定的文件
}
